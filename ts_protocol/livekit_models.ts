/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: livekit_models.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace livekit {
    export enum AudioCodec {
        DEFAULT_AC = 0,
        OPUS = 1,
        AAC = 2
    }
    export enum VideoCodec {
        DEFAULT_VC = 0,
        H264_BASELINE = 1,
        H264_MAIN = 2,
        H264_HIGH = 3,
        VP8 = 4
    }
    export enum TrackType {
        AUDIO = 0,
        VIDEO = 1,
        DATA = 2
    }
    export enum TrackSource {
        UNKNOWN = 0,
        CAMERA = 1,
        MICROPHONE = 2,
        SCREEN_SHARE = 3,
        SCREEN_SHARE_AUDIO = 4
    }
    export enum VideoQuality {
        LOW = 0,
        MEDIUM = 1,
        HIGH = 2,
        OFF = 3
    }
    export enum ConnectionQuality {
        POOR = 0,
        GOOD = 1,
        EXCELLENT = 2
    }
    export enum ClientConfigSetting {
        UNSET = 0,
        DISABLED = 1,
        ENABLED = 2
    }
    export enum DisconnectReason {
        UNKNOWN_REASON = 0,
        CLIENT_INITIATED = 1,
        DUPLICATE_IDENTITY = 2,
        SERVER_SHUTDOWN = 3,
        PARTICIPANT_REMOVED = 4,
        ROOM_DELETED = 5,
        STATE_MISMATCH = 6,
        JOIN_FAILURE = 7
    }
    export enum ReconnectReason {
        RR_UNKOWN = 0,
        RR_SIGNAL_DISCONNECTED = 1,
        RR_PUBLISHER_FAILED = 2,
        RR_SUBSCRIBER_FAILED = 3,
        RR_SWITCH_CANDIDATE = 4
    }
    export class Room extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sid?: string;
            name?: string;
            empty_timeout?: number;
            max_participants?: number;
            creation_time?: number;
            turn_password?: string;
            enabled_codecs?: Codec[];
            metadata?: string;
            num_participants?: number;
            num_publishers?: number;
            active_recording?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sid" in data && data.sid != undefined) {
                    this.sid = data.sid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("empty_timeout" in data && data.empty_timeout != undefined) {
                    this.empty_timeout = data.empty_timeout;
                }
                if ("max_participants" in data && data.max_participants != undefined) {
                    this.max_participants = data.max_participants;
                }
                if ("creation_time" in data && data.creation_time != undefined) {
                    this.creation_time = data.creation_time;
                }
                if ("turn_password" in data && data.turn_password != undefined) {
                    this.turn_password = data.turn_password;
                }
                if ("enabled_codecs" in data && data.enabled_codecs != undefined) {
                    this.enabled_codecs = data.enabled_codecs;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("num_participants" in data && data.num_participants != undefined) {
                    this.num_participants = data.num_participants;
                }
                if ("num_publishers" in data && data.num_publishers != undefined) {
                    this.num_publishers = data.num_publishers;
                }
                if ("active_recording" in data && data.active_recording != undefined) {
                    this.active_recording = data.active_recording;
                }
            }
        }
        get sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get empty_timeout() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set empty_timeout(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get max_participants() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set max_participants(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get creation_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set creation_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get turn_password() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set turn_password(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get enabled_codecs() {
            return pb_1.Message.getRepeatedWrapperField(this, Codec, 7) as Codec[];
        }
        set enabled_codecs(value: Codec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get num_participants() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set num_participants(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get num_publishers() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set num_publishers(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get active_recording() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set active_recording(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            sid?: string;
            name?: string;
            empty_timeout?: number;
            max_participants?: number;
            creation_time?: number;
            turn_password?: string;
            enabled_codecs?: ReturnType<typeof Codec.prototype.toObject>[];
            metadata?: string;
            num_participants?: number;
            num_publishers?: number;
            active_recording?: boolean;
        }): Room {
            const message = new Room({});
            if (data.sid != null) {
                message.sid = data.sid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.empty_timeout != null) {
                message.empty_timeout = data.empty_timeout;
            }
            if (data.max_participants != null) {
                message.max_participants = data.max_participants;
            }
            if (data.creation_time != null) {
                message.creation_time = data.creation_time;
            }
            if (data.turn_password != null) {
                message.turn_password = data.turn_password;
            }
            if (data.enabled_codecs != null) {
                message.enabled_codecs = data.enabled_codecs.map(item => Codec.fromObject(item));
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            if (data.num_participants != null) {
                message.num_participants = data.num_participants;
            }
            if (data.num_publishers != null) {
                message.num_publishers = data.num_publishers;
            }
            if (data.active_recording != null) {
                message.active_recording = data.active_recording;
            }
            return message;
        }
        toObject() {
            const data: {
                sid?: string;
                name?: string;
                empty_timeout?: number;
                max_participants?: number;
                creation_time?: number;
                turn_password?: string;
                enabled_codecs?: ReturnType<typeof Codec.prototype.toObject>[];
                metadata?: string;
                num_participants?: number;
                num_publishers?: number;
                active_recording?: boolean;
            } = {};
            if (this.sid != null) {
                data.sid = this.sid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.empty_timeout != null) {
                data.empty_timeout = this.empty_timeout;
            }
            if (this.max_participants != null) {
                data.max_participants = this.max_participants;
            }
            if (this.creation_time != null) {
                data.creation_time = this.creation_time;
            }
            if (this.turn_password != null) {
                data.turn_password = this.turn_password;
            }
            if (this.enabled_codecs != null) {
                data.enabled_codecs = this.enabled_codecs.map((item: Codec) => item.toObject());
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            if (this.num_participants != null) {
                data.num_participants = this.num_participants;
            }
            if (this.num_publishers != null) {
                data.num_publishers = this.num_publishers;
            }
            if (this.active_recording != null) {
                data.active_recording = this.active_recording;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sid.length)
                writer.writeString(1, this.sid);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.empty_timeout != 0)
                writer.writeUint32(3, this.empty_timeout);
            if (this.max_participants != 0)
                writer.writeUint32(4, this.max_participants);
            if (this.creation_time != 0)
                writer.writeInt64(5, this.creation_time);
            if (this.turn_password.length)
                writer.writeString(6, this.turn_password);
            if (this.enabled_codecs.length)
                writer.writeRepeatedMessage(7, this.enabled_codecs, (item: Codec) => item.serialize(writer));
            if (this.metadata.length)
                writer.writeString(8, this.metadata);
            if (this.num_participants != 0)
                writer.writeUint32(9, this.num_participants);
            if (this.num_publishers != 0)
                writer.writeUint32(11, this.num_publishers);
            if (this.active_recording != false)
                writer.writeBool(10, this.active_recording);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Room {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Room();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sid = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.empty_timeout = reader.readUint32();
                        break;
                    case 4:
                        message.max_participants = reader.readUint32();
                        break;
                    case 5:
                        message.creation_time = reader.readInt64();
                        break;
                    case 6:
                        message.turn_password = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.enabled_codecs, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Codec.deserialize(reader), Codec));
                        break;
                    case 8:
                        message.metadata = reader.readString();
                        break;
                    case 9:
                        message.num_participants = reader.readUint32();
                        break;
                    case 11:
                        message.num_publishers = reader.readUint32();
                        break;
                    case 10:
                        message.active_recording = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Room {
            return Room.deserialize(bytes);
        }
    }
    export class Codec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mime?: string;
            fmtp_line?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mime" in data && data.mime != undefined) {
                    this.mime = data.mime;
                }
                if ("fmtp_line" in data && data.fmtp_line != undefined) {
                    this.fmtp_line = data.fmtp_line;
                }
            }
        }
        get mime() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set mime(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get fmtp_line() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set fmtp_line(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            mime?: string;
            fmtp_line?: string;
        }): Codec {
            const message = new Codec({});
            if (data.mime != null) {
                message.mime = data.mime;
            }
            if (data.fmtp_line != null) {
                message.fmtp_line = data.fmtp_line;
            }
            return message;
        }
        toObject() {
            const data: {
                mime?: string;
                fmtp_line?: string;
            } = {};
            if (this.mime != null) {
                data.mime = this.mime;
            }
            if (this.fmtp_line != null) {
                data.fmtp_line = this.fmtp_line;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mime.length)
                writer.writeString(1, this.mime);
            if (this.fmtp_line.length)
                writer.writeString(2, this.fmtp_line);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Codec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Codec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mime = reader.readString();
                        break;
                    case 2:
                        message.fmtp_line = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Codec {
            return Codec.deserialize(bytes);
        }
    }
    export class ParticipantPermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            can_subscribe?: boolean;
            can_publish?: boolean;
            can_publish_data?: boolean;
            can_publish_sources?: TrackSource[];
            hidden?: boolean;
            recorder?: boolean;
            can_update_metadata?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("can_subscribe" in data && data.can_subscribe != undefined) {
                    this.can_subscribe = data.can_subscribe;
                }
                if ("can_publish" in data && data.can_publish != undefined) {
                    this.can_publish = data.can_publish;
                }
                if ("can_publish_data" in data && data.can_publish_data != undefined) {
                    this.can_publish_data = data.can_publish_data;
                }
                if ("can_publish_sources" in data && data.can_publish_sources != undefined) {
                    this.can_publish_sources = data.can_publish_sources;
                }
                if ("hidden" in data && data.hidden != undefined) {
                    this.hidden = data.hidden;
                }
                if ("recorder" in data && data.recorder != undefined) {
                    this.recorder = data.recorder;
                }
                if ("can_update_metadata" in data && data.can_update_metadata != undefined) {
                    this.can_update_metadata = data.can_update_metadata;
                }
            }
        }
        get can_subscribe() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set can_subscribe(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get can_publish() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set can_publish(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get can_publish_data() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set can_publish_data(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get can_publish_sources() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as TrackSource[];
        }
        set can_publish_sources(value: TrackSource[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get hidden() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set hidden(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get recorder() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set recorder(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get can_update_metadata() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set can_update_metadata(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            can_subscribe?: boolean;
            can_publish?: boolean;
            can_publish_data?: boolean;
            can_publish_sources?: TrackSource[];
            hidden?: boolean;
            recorder?: boolean;
            can_update_metadata?: boolean;
        }): ParticipantPermission {
            const message = new ParticipantPermission({});
            if (data.can_subscribe != null) {
                message.can_subscribe = data.can_subscribe;
            }
            if (data.can_publish != null) {
                message.can_publish = data.can_publish;
            }
            if (data.can_publish_data != null) {
                message.can_publish_data = data.can_publish_data;
            }
            if (data.can_publish_sources != null) {
                message.can_publish_sources = data.can_publish_sources;
            }
            if (data.hidden != null) {
                message.hidden = data.hidden;
            }
            if (data.recorder != null) {
                message.recorder = data.recorder;
            }
            if (data.can_update_metadata != null) {
                message.can_update_metadata = data.can_update_metadata;
            }
            return message;
        }
        toObject() {
            const data: {
                can_subscribe?: boolean;
                can_publish?: boolean;
                can_publish_data?: boolean;
                can_publish_sources?: TrackSource[];
                hidden?: boolean;
                recorder?: boolean;
                can_update_metadata?: boolean;
            } = {};
            if (this.can_subscribe != null) {
                data.can_subscribe = this.can_subscribe;
            }
            if (this.can_publish != null) {
                data.can_publish = this.can_publish;
            }
            if (this.can_publish_data != null) {
                data.can_publish_data = this.can_publish_data;
            }
            if (this.can_publish_sources != null) {
                data.can_publish_sources = this.can_publish_sources;
            }
            if (this.hidden != null) {
                data.hidden = this.hidden;
            }
            if (this.recorder != null) {
                data.recorder = this.recorder;
            }
            if (this.can_update_metadata != null) {
                data.can_update_metadata = this.can_update_metadata;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.can_subscribe != false)
                writer.writeBool(1, this.can_subscribe);
            if (this.can_publish != false)
                writer.writeBool(2, this.can_publish);
            if (this.can_publish_data != false)
                writer.writeBool(3, this.can_publish_data);
            if (this.can_publish_sources.length)
                writer.writePackedEnum(9, this.can_publish_sources);
            if (this.hidden != false)
                writer.writeBool(7, this.hidden);
            if (this.recorder != false)
                writer.writeBool(8, this.recorder);
            if (this.can_update_metadata != false)
                writer.writeBool(10, this.can_update_metadata);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParticipantPermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParticipantPermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.can_subscribe = reader.readBool();
                        break;
                    case 2:
                        message.can_publish = reader.readBool();
                        break;
                    case 3:
                        message.can_publish_data = reader.readBool();
                        break;
                    case 9:
                        message.can_publish_sources = reader.readPackedEnum();
                        break;
                    case 7:
                        message.hidden = reader.readBool();
                        break;
                    case 8:
                        message.recorder = reader.readBool();
                        break;
                    case 10:
                        message.can_update_metadata = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ParticipantPermission {
            return ParticipantPermission.deserialize(bytes);
        }
    }
    export class ParticipantInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sid?: string;
            identity?: string;
            state?: ParticipantInfo.State;
            tracks?: TrackInfo[];
            metadata?: string;
            joined_at?: number;
            name?: string;
            version?: number;
            permission?: ParticipantPermission;
            region?: string;
            is_publisher?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sid" in data && data.sid != undefined) {
                    this.sid = data.sid;
                }
                if ("identity" in data && data.identity != undefined) {
                    this.identity = data.identity;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("tracks" in data && data.tracks != undefined) {
                    this.tracks = data.tracks;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("joined_at" in data && data.joined_at != undefined) {
                    this.joined_at = data.joined_at;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("permission" in data && data.permission != undefined) {
                    this.permission = data.permission;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
                if ("is_publisher" in data && data.is_publisher != undefined) {
                    this.is_publisher = data.is_publisher;
                }
            }
        }
        get sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get identity() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set identity(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 3, ParticipantInfo.State.JOINING) as ParticipantInfo.State;
        }
        set state(value: ParticipantInfo.State) {
            pb_1.Message.setField(this, 3, value);
        }
        get tracks() {
            return pb_1.Message.getRepeatedWrapperField(this, TrackInfo, 4) as TrackInfo[];
        }
        set tracks(value: TrackInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get joined_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set joined_at(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get permission() {
            return pb_1.Message.getWrapperField(this, ParticipantPermission, 11) as ParticipantPermission;
        }
        set permission(value: ParticipantPermission) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_permission() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get is_publisher() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set is_publisher(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            sid?: string;
            identity?: string;
            state?: ParticipantInfo.State;
            tracks?: ReturnType<typeof TrackInfo.prototype.toObject>[];
            metadata?: string;
            joined_at?: number;
            name?: string;
            version?: number;
            permission?: ReturnType<typeof ParticipantPermission.prototype.toObject>;
            region?: string;
            is_publisher?: boolean;
        }): ParticipantInfo {
            const message = new ParticipantInfo({});
            if (data.sid != null) {
                message.sid = data.sid;
            }
            if (data.identity != null) {
                message.identity = data.identity;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.tracks != null) {
                message.tracks = data.tracks.map(item => TrackInfo.fromObject(item));
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            if (data.joined_at != null) {
                message.joined_at = data.joined_at;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.permission != null) {
                message.permission = ParticipantPermission.fromObject(data.permission);
            }
            if (data.region != null) {
                message.region = data.region;
            }
            if (data.is_publisher != null) {
                message.is_publisher = data.is_publisher;
            }
            return message;
        }
        toObject() {
            const data: {
                sid?: string;
                identity?: string;
                state?: ParticipantInfo.State;
                tracks?: ReturnType<typeof TrackInfo.prototype.toObject>[];
                metadata?: string;
                joined_at?: number;
                name?: string;
                version?: number;
                permission?: ReturnType<typeof ParticipantPermission.prototype.toObject>;
                region?: string;
                is_publisher?: boolean;
            } = {};
            if (this.sid != null) {
                data.sid = this.sid;
            }
            if (this.identity != null) {
                data.identity = this.identity;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.tracks != null) {
                data.tracks = this.tracks.map((item: TrackInfo) => item.toObject());
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            if (this.joined_at != null) {
                data.joined_at = this.joined_at;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.permission != null) {
                data.permission = this.permission.toObject();
            }
            if (this.region != null) {
                data.region = this.region;
            }
            if (this.is_publisher != null) {
                data.is_publisher = this.is_publisher;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sid.length)
                writer.writeString(1, this.sid);
            if (this.identity.length)
                writer.writeString(2, this.identity);
            if (this.state != ParticipantInfo.State.JOINING)
                writer.writeEnum(3, this.state);
            if (this.tracks.length)
                writer.writeRepeatedMessage(4, this.tracks, (item: TrackInfo) => item.serialize(writer));
            if (this.metadata.length)
                writer.writeString(5, this.metadata);
            if (this.joined_at != 0)
                writer.writeInt64(6, this.joined_at);
            if (this.name.length)
                writer.writeString(9, this.name);
            if (this.version != 0)
                writer.writeUint32(10, this.version);
            if (this.has_permission)
                writer.writeMessage(11, this.permission, () => this.permission.serialize(writer));
            if (this.region.length)
                writer.writeString(12, this.region);
            if (this.is_publisher != false)
                writer.writeBool(13, this.is_publisher);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParticipantInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParticipantInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sid = reader.readString();
                        break;
                    case 2:
                        message.identity = reader.readString();
                        break;
                    case 3:
                        message.state = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.tracks, () => pb_1.Message.addToRepeatedWrapperField(message, 4, TrackInfo.deserialize(reader), TrackInfo));
                        break;
                    case 5:
                        message.metadata = reader.readString();
                        break;
                    case 6:
                        message.joined_at = reader.readInt64();
                        break;
                    case 9:
                        message.name = reader.readString();
                        break;
                    case 10:
                        message.version = reader.readUint32();
                        break;
                    case 11:
                        reader.readMessage(message.permission, () => message.permission = ParticipantPermission.deserialize(reader));
                        break;
                    case 12:
                        message.region = reader.readString();
                        break;
                    case 13:
                        message.is_publisher = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ParticipantInfo {
            return ParticipantInfo.deserialize(bytes);
        }
    }
    export namespace ParticipantInfo {
        export enum State {
            JOINING = 0,
            JOINED = 1,
            ACTIVE = 2,
            DISCONNECTED = 3
        }
    }
    export class Encryption extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Encryption {
            const message = new Encryption({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Encryption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Encryption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Encryption {
            return Encryption.deserialize(bytes);
        }
    }
    export namespace Encryption {
        export enum Type {
            NONE = 0,
            GCM = 1,
            CUSTOM = 2
        }
    }
    export class SimulcastCodecInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mime_type?: string;
            mid?: string;
            cid?: string;
            layers?: VideoLayer[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
                if ("mid" in data && data.mid != undefined) {
                    this.mid = data.mid;
                }
                if ("cid" in data && data.cid != undefined) {
                    this.cid = data.cid;
                }
                if ("layers" in data && data.layers != undefined) {
                    this.layers = data.layers;
                }
            }
        }
        get mime_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get mid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set mid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get cid() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set cid(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get layers() {
            return pb_1.Message.getRepeatedWrapperField(this, VideoLayer, 4) as VideoLayer[];
        }
        set layers(value: VideoLayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            mime_type?: string;
            mid?: string;
            cid?: string;
            layers?: ReturnType<typeof VideoLayer.prototype.toObject>[];
        }): SimulcastCodecInfo {
            const message = new SimulcastCodecInfo({});
            if (data.mime_type != null) {
                message.mime_type = data.mime_type;
            }
            if (data.mid != null) {
                message.mid = data.mid;
            }
            if (data.cid != null) {
                message.cid = data.cid;
            }
            if (data.layers != null) {
                message.layers = data.layers.map(item => VideoLayer.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                mime_type?: string;
                mid?: string;
                cid?: string;
                layers?: ReturnType<typeof VideoLayer.prototype.toObject>[];
            } = {};
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            if (this.mid != null) {
                data.mid = this.mid;
            }
            if (this.cid != null) {
                data.cid = this.cid;
            }
            if (this.layers != null) {
                data.layers = this.layers.map((item: VideoLayer) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mime_type.length)
                writer.writeString(1, this.mime_type);
            if (this.mid.length)
                writer.writeString(2, this.mid);
            if (this.cid.length)
                writer.writeString(3, this.cid);
            if (this.layers.length)
                writer.writeRepeatedMessage(4, this.layers, (item: VideoLayer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimulcastCodecInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimulcastCodecInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mime_type = reader.readString();
                        break;
                    case 2:
                        message.mid = reader.readString();
                        break;
                    case 3:
                        message.cid = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.layers, () => pb_1.Message.addToRepeatedWrapperField(message, 4, VideoLayer.deserialize(reader), VideoLayer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SimulcastCodecInfo {
            return SimulcastCodecInfo.deserialize(bytes);
        }
    }
    export class TrackInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sid?: string;
            type?: TrackType;
            name?: string;
            muted?: boolean;
            width?: number;
            height?: number;
            simulcast?: boolean;
            disable_dtx?: boolean;
            source?: TrackSource;
            layers?: VideoLayer[];
            mime_type?: string;
            mid?: string;
            codecs?: SimulcastCodecInfo[];
            stereo?: boolean;
            disable_red?: boolean;
            encryption?: Encryption.Type;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sid" in data && data.sid != undefined) {
                    this.sid = data.sid;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("muted" in data && data.muted != undefined) {
                    this.muted = data.muted;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("simulcast" in data && data.simulcast != undefined) {
                    this.simulcast = data.simulcast;
                }
                if ("disable_dtx" in data && data.disable_dtx != undefined) {
                    this.disable_dtx = data.disable_dtx;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("layers" in data && data.layers != undefined) {
                    this.layers = data.layers;
                }
                if ("mime_type" in data && data.mime_type != undefined) {
                    this.mime_type = data.mime_type;
                }
                if ("mid" in data && data.mid != undefined) {
                    this.mid = data.mid;
                }
                if ("codecs" in data && data.codecs != undefined) {
                    this.codecs = data.codecs;
                }
                if ("stereo" in data && data.stereo != undefined) {
                    this.stereo = data.stereo;
                }
                if ("disable_red" in data && data.disable_red != undefined) {
                    this.disable_red = data.disable_red;
                }
                if ("encryption" in data && data.encryption != undefined) {
                    this.encryption = data.encryption;
                }
            }
        }
        get sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, TrackType.AUDIO) as TrackType;
        }
        set type(value: TrackType) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get muted() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set muted(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get simulcast() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set simulcast(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get disable_dtx() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set disable_dtx(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 9, TrackSource.UNKNOWN) as TrackSource;
        }
        set source(value: TrackSource) {
            pb_1.Message.setField(this, 9, value);
        }
        get layers() {
            return pb_1.Message.getRepeatedWrapperField(this, VideoLayer, 10) as VideoLayer[];
        }
        set layers(value: VideoLayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get mime_type() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set mime_type(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get mid() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set mid(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get codecs() {
            return pb_1.Message.getRepeatedWrapperField(this, SimulcastCodecInfo, 13) as SimulcastCodecInfo[];
        }
        set codecs(value: SimulcastCodecInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get stereo() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set stereo(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get disable_red() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set disable_red(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get encryption() {
            return pb_1.Message.getFieldWithDefault(this, 16, Encryption.Type.NONE) as Encryption.Type;
        }
        set encryption(value: Encryption.Type) {
            pb_1.Message.setField(this, 16, value);
        }
        static fromObject(data: {
            sid?: string;
            type?: TrackType;
            name?: string;
            muted?: boolean;
            width?: number;
            height?: number;
            simulcast?: boolean;
            disable_dtx?: boolean;
            source?: TrackSource;
            layers?: ReturnType<typeof VideoLayer.prototype.toObject>[];
            mime_type?: string;
            mid?: string;
            codecs?: ReturnType<typeof SimulcastCodecInfo.prototype.toObject>[];
            stereo?: boolean;
            disable_red?: boolean;
            encryption?: Encryption.Type;
        }): TrackInfo {
            const message = new TrackInfo({});
            if (data.sid != null) {
                message.sid = data.sid;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.muted != null) {
                message.muted = data.muted;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.simulcast != null) {
                message.simulcast = data.simulcast;
            }
            if (data.disable_dtx != null) {
                message.disable_dtx = data.disable_dtx;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.layers != null) {
                message.layers = data.layers.map(item => VideoLayer.fromObject(item));
            }
            if (data.mime_type != null) {
                message.mime_type = data.mime_type;
            }
            if (data.mid != null) {
                message.mid = data.mid;
            }
            if (data.codecs != null) {
                message.codecs = data.codecs.map(item => SimulcastCodecInfo.fromObject(item));
            }
            if (data.stereo != null) {
                message.stereo = data.stereo;
            }
            if (data.disable_red != null) {
                message.disable_red = data.disable_red;
            }
            if (data.encryption != null) {
                message.encryption = data.encryption;
            }
            return message;
        }
        toObject() {
            const data: {
                sid?: string;
                type?: TrackType;
                name?: string;
                muted?: boolean;
                width?: number;
                height?: number;
                simulcast?: boolean;
                disable_dtx?: boolean;
                source?: TrackSource;
                layers?: ReturnType<typeof VideoLayer.prototype.toObject>[];
                mime_type?: string;
                mid?: string;
                codecs?: ReturnType<typeof SimulcastCodecInfo.prototype.toObject>[];
                stereo?: boolean;
                disable_red?: boolean;
                encryption?: Encryption.Type;
            } = {};
            if (this.sid != null) {
                data.sid = this.sid;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.muted != null) {
                data.muted = this.muted;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.simulcast != null) {
                data.simulcast = this.simulcast;
            }
            if (this.disable_dtx != null) {
                data.disable_dtx = this.disable_dtx;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.layers != null) {
                data.layers = this.layers.map((item: VideoLayer) => item.toObject());
            }
            if (this.mime_type != null) {
                data.mime_type = this.mime_type;
            }
            if (this.mid != null) {
                data.mid = this.mid;
            }
            if (this.codecs != null) {
                data.codecs = this.codecs.map((item: SimulcastCodecInfo) => item.toObject());
            }
            if (this.stereo != null) {
                data.stereo = this.stereo;
            }
            if (this.disable_red != null) {
                data.disable_red = this.disable_red;
            }
            if (this.encryption != null) {
                data.encryption = this.encryption;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sid.length)
                writer.writeString(1, this.sid);
            if (this.type != TrackType.AUDIO)
                writer.writeEnum(2, this.type);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.muted != false)
                writer.writeBool(4, this.muted);
            if (this.width != 0)
                writer.writeUint32(5, this.width);
            if (this.height != 0)
                writer.writeUint32(6, this.height);
            if (this.simulcast != false)
                writer.writeBool(7, this.simulcast);
            if (this.disable_dtx != false)
                writer.writeBool(8, this.disable_dtx);
            if (this.source != TrackSource.UNKNOWN)
                writer.writeEnum(9, this.source);
            if (this.layers.length)
                writer.writeRepeatedMessage(10, this.layers, (item: VideoLayer) => item.serialize(writer));
            if (this.mime_type.length)
                writer.writeString(11, this.mime_type);
            if (this.mid.length)
                writer.writeString(12, this.mid);
            if (this.codecs.length)
                writer.writeRepeatedMessage(13, this.codecs, (item: SimulcastCodecInfo) => item.serialize(writer));
            if (this.stereo != false)
                writer.writeBool(14, this.stereo);
            if (this.disable_red != false)
                writer.writeBool(15, this.disable_red);
            if (this.encryption != Encryption.Type.NONE)
                writer.writeEnum(16, this.encryption);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sid = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.muted = reader.readBool();
                        break;
                    case 5:
                        message.width = reader.readUint32();
                        break;
                    case 6:
                        message.height = reader.readUint32();
                        break;
                    case 7:
                        message.simulcast = reader.readBool();
                        break;
                    case 8:
                        message.disable_dtx = reader.readBool();
                        break;
                    case 9:
                        message.source = reader.readEnum();
                        break;
                    case 10:
                        reader.readMessage(message.layers, () => pb_1.Message.addToRepeatedWrapperField(message, 10, VideoLayer.deserialize(reader), VideoLayer));
                        break;
                    case 11:
                        message.mime_type = reader.readString();
                        break;
                    case 12:
                        message.mid = reader.readString();
                        break;
                    case 13:
                        reader.readMessage(message.codecs, () => pb_1.Message.addToRepeatedWrapperField(message, 13, SimulcastCodecInfo.deserialize(reader), SimulcastCodecInfo));
                        break;
                    case 14:
                        message.stereo = reader.readBool();
                        break;
                    case 15:
                        message.disable_red = reader.readBool();
                        break;
                    case 16:
                        message.encryption = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TrackInfo {
            return TrackInfo.deserialize(bytes);
        }
    }
    export class VideoLayer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quality?: VideoQuality;
            width?: number;
            height?: number;
            bitrate?: number;
            ssrc?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quality" in data && data.quality != undefined) {
                    this.quality = data.quality;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("bitrate" in data && data.bitrate != undefined) {
                    this.bitrate = data.bitrate;
                }
                if ("ssrc" in data && data.ssrc != undefined) {
                    this.ssrc = data.ssrc;
                }
            }
        }
        get quality() {
            return pb_1.Message.getFieldWithDefault(this, 1, VideoQuality.LOW) as VideoQuality;
        }
        set quality(value: VideoQuality) {
            pb_1.Message.setField(this, 1, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set width(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get bitrate() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set bitrate(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get ssrc() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set ssrc(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            quality?: VideoQuality;
            width?: number;
            height?: number;
            bitrate?: number;
            ssrc?: number;
        }): VideoLayer {
            const message = new VideoLayer({});
            if (data.quality != null) {
                message.quality = data.quality;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.bitrate != null) {
                message.bitrate = data.bitrate;
            }
            if (data.ssrc != null) {
                message.ssrc = data.ssrc;
            }
            return message;
        }
        toObject() {
            const data: {
                quality?: VideoQuality;
                width?: number;
                height?: number;
                bitrate?: number;
                ssrc?: number;
            } = {};
            if (this.quality != null) {
                data.quality = this.quality;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.bitrate != null) {
                data.bitrate = this.bitrate;
            }
            if (this.ssrc != null) {
                data.ssrc = this.ssrc;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quality != VideoQuality.LOW)
                writer.writeEnum(1, this.quality);
            if (this.width != 0)
                writer.writeUint32(2, this.width);
            if (this.height != 0)
                writer.writeUint32(3, this.height);
            if (this.bitrate != 0)
                writer.writeUint32(4, this.bitrate);
            if (this.ssrc != 0)
                writer.writeUint32(5, this.ssrc);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoLayer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoLayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quality = reader.readEnum();
                        break;
                    case 2:
                        message.width = reader.readUint32();
                        break;
                    case 3:
                        message.height = reader.readUint32();
                        break;
                    case 4:
                        message.bitrate = reader.readUint32();
                        break;
                    case 5:
                        message.ssrc = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoLayer {
            return VideoLayer.deserialize(bytes);
        }
    }
    export class DataPacket extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            kind?: DataPacket.Kind;
        } & (({
            user?: UserPacket;
            speaker?: never;
        } | {
            user?: never;
            speaker?: ActiveSpeakerUpdate;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("speaker" in data && data.speaker != undefined) {
                    this.speaker = data.speaker;
                }
            }
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 1, DataPacket.Kind.RELIABLE) as DataPacket.Kind;
        }
        set kind(value: DataPacket.Kind) {
            pb_1.Message.setField(this, 1, value);
        }
        get user() {
            return pb_1.Message.getWrapperField(this, UserPacket, 2) as UserPacket;
        }
        set user(value: UserPacket) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get speaker() {
            return pb_1.Message.getWrapperField(this, ActiveSpeakerUpdate, 3) as ActiveSpeakerUpdate;
        }
        set speaker(value: ActiveSpeakerUpdate) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_speaker() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "user" | "speaker";
            } = {
                0: "none",
                2: "user",
                3: "speaker"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            kind?: DataPacket.Kind;
            user?: ReturnType<typeof UserPacket.prototype.toObject>;
            speaker?: ReturnType<typeof ActiveSpeakerUpdate.prototype.toObject>;
        }): DataPacket {
            const message = new DataPacket({});
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (data.user != null) {
                message.user = UserPacket.fromObject(data.user);
            }
            if (data.speaker != null) {
                message.speaker = ActiveSpeakerUpdate.fromObject(data.speaker);
            }
            return message;
        }
        toObject() {
            const data: {
                kind?: DataPacket.Kind;
                user?: ReturnType<typeof UserPacket.prototype.toObject>;
                speaker?: ReturnType<typeof ActiveSpeakerUpdate.prototype.toObject>;
            } = {};
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.speaker != null) {
                data.speaker = this.speaker.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.kind != DataPacket.Kind.RELIABLE)
                writer.writeEnum(1, this.kind);
            if (this.has_user)
                writer.writeMessage(2, this.user, () => this.user.serialize(writer));
            if (this.has_speaker)
                writer.writeMessage(3, this.speaker, () => this.speaker.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataPacket {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataPacket();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.kind = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.user, () => message.user = UserPacket.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.speaker, () => message.speaker = ActiveSpeakerUpdate.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataPacket {
            return DataPacket.deserialize(bytes);
        }
    }
    export namespace DataPacket {
        export enum Kind {
            RELIABLE = 0,
            LOSSY = 1
        }
    }
    export class ActiveSpeakerUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            speakers?: SpeakerInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("speakers" in data && data.speakers != undefined) {
                    this.speakers = data.speakers;
                }
            }
        }
        get speakers() {
            return pb_1.Message.getRepeatedWrapperField(this, SpeakerInfo, 1) as SpeakerInfo[];
        }
        set speakers(value: SpeakerInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            speakers?: ReturnType<typeof SpeakerInfo.prototype.toObject>[];
        }): ActiveSpeakerUpdate {
            const message = new ActiveSpeakerUpdate({});
            if (data.speakers != null) {
                message.speakers = data.speakers.map(item => SpeakerInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                speakers?: ReturnType<typeof SpeakerInfo.prototype.toObject>[];
            } = {};
            if (this.speakers != null) {
                data.speakers = this.speakers.map((item: SpeakerInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.speakers.length)
                writer.writeRepeatedMessage(1, this.speakers, (item: SpeakerInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActiveSpeakerUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActiveSpeakerUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.speakers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SpeakerInfo.deserialize(reader), SpeakerInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActiveSpeakerUpdate {
            return ActiveSpeakerUpdate.deserialize(bytes);
        }
    }
    export class SpeakerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sid?: string;
            level?: number;
            active?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sid" in data && data.sid != undefined) {
                    this.sid = data.sid;
                }
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("active" in data && data.active != undefined) {
                    this.active = data.active;
                }
            }
        }
        get sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get active() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set active(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sid?: string;
            level?: number;
            active?: boolean;
        }): SpeakerInfo {
            const message = new SpeakerInfo({});
            if (data.sid != null) {
                message.sid = data.sid;
            }
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.active != null) {
                message.active = data.active;
            }
            return message;
        }
        toObject() {
            const data: {
                sid?: string;
                level?: number;
                active?: boolean;
            } = {};
            if (this.sid != null) {
                data.sid = this.sid;
            }
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.active != null) {
                data.active = this.active;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sid.length)
                writer.writeString(1, this.sid);
            if (this.level != 0)
                writer.writeFloat(2, this.level);
            if (this.active != false)
                writer.writeBool(3, this.active);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpeakerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpeakerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sid = reader.readString();
                        break;
                    case 2:
                        message.level = reader.readFloat();
                        break;
                    case 3:
                        message.active = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SpeakerInfo {
            return SpeakerInfo.deserialize(bytes);
        }
    }
    export class UserPacket extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            participant_sid?: string;
            payload?: Uint8Array;
            destination_sids?: string[];
        } & (({
            topic?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("destination_sids" in data && data.destination_sids != undefined) {
                    this.destination_sids = data.destination_sids;
                }
                if ("topic" in data && data.topic != undefined) {
                    this.topic = data.topic;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get payload() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set payload(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get destination_sids() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set destination_sids(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get topic() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set topic(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_topic() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _topic() {
            const cases: {
                [index: number]: "none" | "topic";
            } = {
                0: "none",
                4: "topic"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            participant_sid?: string;
            payload?: Uint8Array;
            destination_sids?: string[];
            topic?: string;
        }): UserPacket {
            const message = new UserPacket({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.payload != null) {
                message.payload = data.payload;
            }
            if (data.destination_sids != null) {
                message.destination_sids = data.destination_sids;
            }
            if (data.topic != null) {
                message.topic = data.topic;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
                payload?: Uint8Array;
                destination_sids?: string[];
                topic?: string;
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            if (this.destination_sids != null) {
                data.destination_sids = this.destination_sids;
            }
            if (this.topic != null) {
                data.topic = this.topic;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (this.payload.length)
                writer.writeBytes(2, this.payload);
            if (this.destination_sids.length)
                writer.writeRepeatedString(3, this.destination_sids);
            if (this.has_topic)
                writer.writeString(4, this.topic);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserPacket {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserPacket();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    case 2:
                        message.payload = reader.readBytes();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.topic = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserPacket {
            return UserPacket.deserialize(bytes);
        }
    }
    export class ParticipantTracks extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant_sid?: string;
            track_sids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant_sid" in data && data.participant_sid != undefined) {
                    this.participant_sid = data.participant_sid;
                }
                if ("track_sids" in data && data.track_sids != undefined) {
                    this.track_sids = data.track_sids;
                }
            }
        }
        get participant_sid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant_sid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get track_sids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set track_sids(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            participant_sid?: string;
            track_sids?: string[];
        }): ParticipantTracks {
            const message = new ParticipantTracks({});
            if (data.participant_sid != null) {
                message.participant_sid = data.participant_sid;
            }
            if (data.track_sids != null) {
                message.track_sids = data.track_sids;
            }
            return message;
        }
        toObject() {
            const data: {
                participant_sid?: string;
                track_sids?: string[];
            } = {};
            if (this.participant_sid != null) {
                data.participant_sid = this.participant_sid;
            }
            if (this.track_sids != null) {
                data.track_sids = this.track_sids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant_sid.length)
                writer.writeString(1, this.participant_sid);
            if (this.track_sids.length)
                writer.writeRepeatedString(2, this.track_sids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParticipantTracks {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParticipantTracks();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant_sid = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ParticipantTracks {
            return ParticipantTracks.deserialize(bytes);
        }
    }
    export class ServerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            edition?: ServerInfo.Edition;
            version?: string;
            protocol?: number;
            region?: string;
            node_id?: string;
            debug_info?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("edition" in data && data.edition != undefined) {
                    this.edition = data.edition;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
                if ("node_id" in data && data.node_id != undefined) {
                    this.node_id = data.node_id;
                }
                if ("debug_info" in data && data.debug_info != undefined) {
                    this.debug_info = data.debug_info;
                }
            }
        }
        get edition() {
            return pb_1.Message.getFieldWithDefault(this, 1, ServerInfo.Edition.Standard) as ServerInfo.Edition;
        }
        set edition(value: ServerInfo.Edition) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set protocol(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get node_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set node_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get debug_info() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set debug_info(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            edition?: ServerInfo.Edition;
            version?: string;
            protocol?: number;
            region?: string;
            node_id?: string;
            debug_info?: string;
        }): ServerInfo {
            const message = new ServerInfo({});
            if (data.edition != null) {
                message.edition = data.edition;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            if (data.node_id != null) {
                message.node_id = data.node_id;
            }
            if (data.debug_info != null) {
                message.debug_info = data.debug_info;
            }
            return message;
        }
        toObject() {
            const data: {
                edition?: ServerInfo.Edition;
                version?: string;
                protocol?: number;
                region?: string;
                node_id?: string;
                debug_info?: string;
            } = {};
            if (this.edition != null) {
                data.edition = this.edition;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            if (this.node_id != null) {
                data.node_id = this.node_id;
            }
            if (this.debug_info != null) {
                data.debug_info = this.debug_info;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.edition != ServerInfo.Edition.Standard)
                writer.writeEnum(1, this.edition);
            if (this.version.length)
                writer.writeString(2, this.version);
            if (this.protocol != 0)
                writer.writeInt32(3, this.protocol);
            if (this.region.length)
                writer.writeString(4, this.region);
            if (this.node_id.length)
                writer.writeString(5, this.node_id);
            if (this.debug_info.length)
                writer.writeString(6, this.debug_info);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.edition = reader.readEnum();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    case 3:
                        message.protocol = reader.readInt32();
                        break;
                    case 4:
                        message.region = reader.readString();
                        break;
                    case 5:
                        message.node_id = reader.readString();
                        break;
                    case 6:
                        message.debug_info = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerInfo {
            return ServerInfo.deserialize(bytes);
        }
    }
    export namespace ServerInfo {
        export enum Edition {
            Standard = 0,
            Cloud = 1
        }
    }
    export class ClientInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sdk?: ClientInfo.SDK;
            version?: string;
            protocol?: number;
            os?: string;
            os_version?: string;
            device_model?: string;
            browser?: string;
            browser_version?: string;
            address?: string;
            network?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sdk" in data && data.sdk != undefined) {
                    this.sdk = data.sdk;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("os" in data && data.os != undefined) {
                    this.os = data.os;
                }
                if ("os_version" in data && data.os_version != undefined) {
                    this.os_version = data.os_version;
                }
                if ("device_model" in data && data.device_model != undefined) {
                    this.device_model = data.device_model;
                }
                if ("browser" in data && data.browser != undefined) {
                    this.browser = data.browser;
                }
                if ("browser_version" in data && data.browser_version != undefined) {
                    this.browser_version = data.browser_version;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("network" in data && data.network != undefined) {
                    this.network = data.network;
                }
            }
        }
        get sdk() {
            return pb_1.Message.getFieldWithDefault(this, 1, ClientInfo.SDK.UNKNOWN) as ClientInfo.SDK;
        }
        set sdk(value: ClientInfo.SDK) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set protocol(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get os() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set os(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get os_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set os_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get device_model() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set device_model(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get browser() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set browser(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get browser_version() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set browser_version(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get network() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set network(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            sdk?: ClientInfo.SDK;
            version?: string;
            protocol?: number;
            os?: string;
            os_version?: string;
            device_model?: string;
            browser?: string;
            browser_version?: string;
            address?: string;
            network?: string;
        }): ClientInfo {
            const message = new ClientInfo({});
            if (data.sdk != null) {
                message.sdk = data.sdk;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.os != null) {
                message.os = data.os;
            }
            if (data.os_version != null) {
                message.os_version = data.os_version;
            }
            if (data.device_model != null) {
                message.device_model = data.device_model;
            }
            if (data.browser != null) {
                message.browser = data.browser;
            }
            if (data.browser_version != null) {
                message.browser_version = data.browser_version;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.network != null) {
                message.network = data.network;
            }
            return message;
        }
        toObject() {
            const data: {
                sdk?: ClientInfo.SDK;
                version?: string;
                protocol?: number;
                os?: string;
                os_version?: string;
                device_model?: string;
                browser?: string;
                browser_version?: string;
                address?: string;
                network?: string;
            } = {};
            if (this.sdk != null) {
                data.sdk = this.sdk;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.os != null) {
                data.os = this.os;
            }
            if (this.os_version != null) {
                data.os_version = this.os_version;
            }
            if (this.device_model != null) {
                data.device_model = this.device_model;
            }
            if (this.browser != null) {
                data.browser = this.browser;
            }
            if (this.browser_version != null) {
                data.browser_version = this.browser_version;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.network != null) {
                data.network = this.network;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sdk != ClientInfo.SDK.UNKNOWN)
                writer.writeEnum(1, this.sdk);
            if (this.version.length)
                writer.writeString(2, this.version);
            if (this.protocol != 0)
                writer.writeInt32(3, this.protocol);
            if (this.os.length)
                writer.writeString(4, this.os);
            if (this.os_version.length)
                writer.writeString(5, this.os_version);
            if (this.device_model.length)
                writer.writeString(6, this.device_model);
            if (this.browser.length)
                writer.writeString(7, this.browser);
            if (this.browser_version.length)
                writer.writeString(8, this.browser_version);
            if (this.address.length)
                writer.writeString(9, this.address);
            if (this.network.length)
                writer.writeString(10, this.network);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sdk = reader.readEnum();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    case 3:
                        message.protocol = reader.readInt32();
                        break;
                    case 4:
                        message.os = reader.readString();
                        break;
                    case 5:
                        message.os_version = reader.readString();
                        break;
                    case 6:
                        message.device_model = reader.readString();
                        break;
                    case 7:
                        message.browser = reader.readString();
                        break;
                    case 8:
                        message.browser_version = reader.readString();
                        break;
                    case 9:
                        message.address = reader.readString();
                        break;
                    case 10:
                        message.network = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientInfo {
            return ClientInfo.deserialize(bytes);
        }
    }
    export namespace ClientInfo {
        export enum SDK {
            UNKNOWN = 0,
            JS = 1,
            SWIFT = 2,
            ANDROID = 3,
            FLUTTER = 4,
            GO = 5,
            UNITY = 6,
            REACT_NATIVE = 7,
            RUST = 8
        }
    }
    export class ClientConfiguration extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            video?: VideoConfiguration;
            screen?: VideoConfiguration;
            resume_connection?: ClientConfigSetting;
            disabled_codecs?: DisabledCodecs;
            force_relay?: ClientConfigSetting;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("video" in data && data.video != undefined) {
                    this.video = data.video;
                }
                if ("screen" in data && data.screen != undefined) {
                    this.screen = data.screen;
                }
                if ("resume_connection" in data && data.resume_connection != undefined) {
                    this.resume_connection = data.resume_connection;
                }
                if ("disabled_codecs" in data && data.disabled_codecs != undefined) {
                    this.disabled_codecs = data.disabled_codecs;
                }
                if ("force_relay" in data && data.force_relay != undefined) {
                    this.force_relay = data.force_relay;
                }
            }
        }
        get video() {
            return pb_1.Message.getWrapperField(this, VideoConfiguration, 1) as VideoConfiguration;
        }
        set video(value: VideoConfiguration) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_video() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get screen() {
            return pb_1.Message.getWrapperField(this, VideoConfiguration, 2) as VideoConfiguration;
        }
        set screen(value: VideoConfiguration) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_screen() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get resume_connection() {
            return pb_1.Message.getFieldWithDefault(this, 3, ClientConfigSetting.UNSET) as ClientConfigSetting;
        }
        set resume_connection(value: ClientConfigSetting) {
            pb_1.Message.setField(this, 3, value);
        }
        get disabled_codecs() {
            return pb_1.Message.getWrapperField(this, DisabledCodecs, 4) as DisabledCodecs;
        }
        set disabled_codecs(value: DisabledCodecs) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_disabled_codecs() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get force_relay() {
            return pb_1.Message.getFieldWithDefault(this, 5, ClientConfigSetting.UNSET) as ClientConfigSetting;
        }
        set force_relay(value: ClientConfigSetting) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            video?: ReturnType<typeof VideoConfiguration.prototype.toObject>;
            screen?: ReturnType<typeof VideoConfiguration.prototype.toObject>;
            resume_connection?: ClientConfigSetting;
            disabled_codecs?: ReturnType<typeof DisabledCodecs.prototype.toObject>;
            force_relay?: ClientConfigSetting;
        }): ClientConfiguration {
            const message = new ClientConfiguration({});
            if (data.video != null) {
                message.video = VideoConfiguration.fromObject(data.video);
            }
            if (data.screen != null) {
                message.screen = VideoConfiguration.fromObject(data.screen);
            }
            if (data.resume_connection != null) {
                message.resume_connection = data.resume_connection;
            }
            if (data.disabled_codecs != null) {
                message.disabled_codecs = DisabledCodecs.fromObject(data.disabled_codecs);
            }
            if (data.force_relay != null) {
                message.force_relay = data.force_relay;
            }
            return message;
        }
        toObject() {
            const data: {
                video?: ReturnType<typeof VideoConfiguration.prototype.toObject>;
                screen?: ReturnType<typeof VideoConfiguration.prototype.toObject>;
                resume_connection?: ClientConfigSetting;
                disabled_codecs?: ReturnType<typeof DisabledCodecs.prototype.toObject>;
                force_relay?: ClientConfigSetting;
            } = {};
            if (this.video != null) {
                data.video = this.video.toObject();
            }
            if (this.screen != null) {
                data.screen = this.screen.toObject();
            }
            if (this.resume_connection != null) {
                data.resume_connection = this.resume_connection;
            }
            if (this.disabled_codecs != null) {
                data.disabled_codecs = this.disabled_codecs.toObject();
            }
            if (this.force_relay != null) {
                data.force_relay = this.force_relay;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_video)
                writer.writeMessage(1, this.video, () => this.video.serialize(writer));
            if (this.has_screen)
                writer.writeMessage(2, this.screen, () => this.screen.serialize(writer));
            if (this.resume_connection != ClientConfigSetting.UNSET)
                writer.writeEnum(3, this.resume_connection);
            if (this.has_disabled_codecs)
                writer.writeMessage(4, this.disabled_codecs, () => this.disabled_codecs.serialize(writer));
            if (this.force_relay != ClientConfigSetting.UNSET)
                writer.writeEnum(5, this.force_relay);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientConfiguration {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientConfiguration();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.video, () => message.video = VideoConfiguration.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.screen, () => message.screen = VideoConfiguration.deserialize(reader));
                        break;
                    case 3:
                        message.resume_connection = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.disabled_codecs, () => message.disabled_codecs = DisabledCodecs.deserialize(reader));
                        break;
                    case 5:
                        message.force_relay = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientConfiguration {
            return ClientConfiguration.deserialize(bytes);
        }
    }
    export class VideoConfiguration extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            hardware_encoder?: ClientConfigSetting;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hardware_encoder" in data && data.hardware_encoder != undefined) {
                    this.hardware_encoder = data.hardware_encoder;
                }
            }
        }
        get hardware_encoder() {
            return pb_1.Message.getFieldWithDefault(this, 1, ClientConfigSetting.UNSET) as ClientConfigSetting;
        }
        set hardware_encoder(value: ClientConfigSetting) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            hardware_encoder?: ClientConfigSetting;
        }): VideoConfiguration {
            const message = new VideoConfiguration({});
            if (data.hardware_encoder != null) {
                message.hardware_encoder = data.hardware_encoder;
            }
            return message;
        }
        toObject() {
            const data: {
                hardware_encoder?: ClientConfigSetting;
            } = {};
            if (this.hardware_encoder != null) {
                data.hardware_encoder = this.hardware_encoder;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hardware_encoder != ClientConfigSetting.UNSET)
                writer.writeEnum(1, this.hardware_encoder);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoConfiguration {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoConfiguration();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hardware_encoder = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoConfiguration {
            return VideoConfiguration.deserialize(bytes);
        }
    }
    export class DisabledCodecs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            codecs?: Codec[];
            publish?: Codec[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("codecs" in data && data.codecs != undefined) {
                    this.codecs = data.codecs;
                }
                if ("publish" in data && data.publish != undefined) {
                    this.publish = data.publish;
                }
            }
        }
        get codecs() {
            return pb_1.Message.getRepeatedWrapperField(this, Codec, 1) as Codec[];
        }
        set codecs(value: Codec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get publish() {
            return pb_1.Message.getRepeatedWrapperField(this, Codec, 2) as Codec[];
        }
        set publish(value: Codec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            codecs?: ReturnType<typeof Codec.prototype.toObject>[];
            publish?: ReturnType<typeof Codec.prototype.toObject>[];
        }): DisabledCodecs {
            const message = new DisabledCodecs({});
            if (data.codecs != null) {
                message.codecs = data.codecs.map(item => Codec.fromObject(item));
            }
            if (data.publish != null) {
                message.publish = data.publish.map(item => Codec.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                codecs?: ReturnType<typeof Codec.prototype.toObject>[];
                publish?: ReturnType<typeof Codec.prototype.toObject>[];
            } = {};
            if (this.codecs != null) {
                data.codecs = this.codecs.map((item: Codec) => item.toObject());
            }
            if (this.publish != null) {
                data.publish = this.publish.map((item: Codec) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.codecs.length)
                writer.writeRepeatedMessage(1, this.codecs, (item: Codec) => item.serialize(writer));
            if (this.publish.length)
                writer.writeRepeatedMessage(2, this.publish, (item: Codec) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisabledCodecs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisabledCodecs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.codecs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Codec.deserialize(reader), Codec));
                        break;
                    case 2:
                        reader.readMessage(message.publish, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Codec.deserialize(reader), Codec));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisabledCodecs {
            return DisabledCodecs.deserialize(bytes);
        }
    }
    export class RTPStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_time?: dependency_1.google.protobuf.Timestamp;
            end_time?: dependency_1.google.protobuf.Timestamp;
            duration?: number;
            packets?: number;
            packet_rate?: number;
            bytes?: number;
            header_bytes?: number;
            bitrate?: number;
            packets_lost?: number;
            packet_loss_rate?: number;
            packet_loss_percentage?: number;
            packets_duplicate?: number;
            packet_duplicate_rate?: number;
            bytes_duplicate?: number;
            header_bytes_duplicate?: number;
            bitrate_duplicate?: number;
            packets_padding?: number;
            packet_padding_rate?: number;
            bytes_padding?: number;
            header_bytes_padding?: number;
            bitrate_padding?: number;
            packets_out_of_order?: number;
            frames?: number;
            frame_rate?: number;
            jitter_current?: number;
            jitter_max?: number;
            gap_histogram?: Map<number, number>;
            nacks?: number;
            nack_acks?: number;
            nack_misses?: number;
            nack_repeated?: number;
            plis?: number;
            last_pli?: dependency_1.google.protobuf.Timestamp;
            firs?: number;
            last_fir?: dependency_1.google.protobuf.Timestamp;
            rtt_current?: number;
            rtt_max?: number;
            key_frames?: number;
            last_key_frame?: dependency_1.google.protobuf.Timestamp;
            layer_lock_plis?: number;
            last_layer_lock_pli?: dependency_1.google.protobuf.Timestamp;
            sample_rate?: number;
            drift_ms?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("packets" in data && data.packets != undefined) {
                    this.packets = data.packets;
                }
                if ("packet_rate" in data && data.packet_rate != undefined) {
                    this.packet_rate = data.packet_rate;
                }
                if ("bytes" in data && data.bytes != undefined) {
                    this.bytes = data.bytes;
                }
                if ("header_bytes" in data && data.header_bytes != undefined) {
                    this.header_bytes = data.header_bytes;
                }
                if ("bitrate" in data && data.bitrate != undefined) {
                    this.bitrate = data.bitrate;
                }
                if ("packets_lost" in data && data.packets_lost != undefined) {
                    this.packets_lost = data.packets_lost;
                }
                if ("packet_loss_rate" in data && data.packet_loss_rate != undefined) {
                    this.packet_loss_rate = data.packet_loss_rate;
                }
                if ("packet_loss_percentage" in data && data.packet_loss_percentage != undefined) {
                    this.packet_loss_percentage = data.packet_loss_percentage;
                }
                if ("packets_duplicate" in data && data.packets_duplicate != undefined) {
                    this.packets_duplicate = data.packets_duplicate;
                }
                if ("packet_duplicate_rate" in data && data.packet_duplicate_rate != undefined) {
                    this.packet_duplicate_rate = data.packet_duplicate_rate;
                }
                if ("bytes_duplicate" in data && data.bytes_duplicate != undefined) {
                    this.bytes_duplicate = data.bytes_duplicate;
                }
                if ("header_bytes_duplicate" in data && data.header_bytes_duplicate != undefined) {
                    this.header_bytes_duplicate = data.header_bytes_duplicate;
                }
                if ("bitrate_duplicate" in data && data.bitrate_duplicate != undefined) {
                    this.bitrate_duplicate = data.bitrate_duplicate;
                }
                if ("packets_padding" in data && data.packets_padding != undefined) {
                    this.packets_padding = data.packets_padding;
                }
                if ("packet_padding_rate" in data && data.packet_padding_rate != undefined) {
                    this.packet_padding_rate = data.packet_padding_rate;
                }
                if ("bytes_padding" in data && data.bytes_padding != undefined) {
                    this.bytes_padding = data.bytes_padding;
                }
                if ("header_bytes_padding" in data && data.header_bytes_padding != undefined) {
                    this.header_bytes_padding = data.header_bytes_padding;
                }
                if ("bitrate_padding" in data && data.bitrate_padding != undefined) {
                    this.bitrate_padding = data.bitrate_padding;
                }
                if ("packets_out_of_order" in data && data.packets_out_of_order != undefined) {
                    this.packets_out_of_order = data.packets_out_of_order;
                }
                if ("frames" in data && data.frames != undefined) {
                    this.frames = data.frames;
                }
                if ("frame_rate" in data && data.frame_rate != undefined) {
                    this.frame_rate = data.frame_rate;
                }
                if ("jitter_current" in data && data.jitter_current != undefined) {
                    this.jitter_current = data.jitter_current;
                }
                if ("jitter_max" in data && data.jitter_max != undefined) {
                    this.jitter_max = data.jitter_max;
                }
                if ("gap_histogram" in data && data.gap_histogram != undefined) {
                    this.gap_histogram = data.gap_histogram;
                }
                if ("nacks" in data && data.nacks != undefined) {
                    this.nacks = data.nacks;
                }
                if ("nack_acks" in data && data.nack_acks != undefined) {
                    this.nack_acks = data.nack_acks;
                }
                if ("nack_misses" in data && data.nack_misses != undefined) {
                    this.nack_misses = data.nack_misses;
                }
                if ("nack_repeated" in data && data.nack_repeated != undefined) {
                    this.nack_repeated = data.nack_repeated;
                }
                if ("plis" in data && data.plis != undefined) {
                    this.plis = data.plis;
                }
                if ("last_pli" in data && data.last_pli != undefined) {
                    this.last_pli = data.last_pli;
                }
                if ("firs" in data && data.firs != undefined) {
                    this.firs = data.firs;
                }
                if ("last_fir" in data && data.last_fir != undefined) {
                    this.last_fir = data.last_fir;
                }
                if ("rtt_current" in data && data.rtt_current != undefined) {
                    this.rtt_current = data.rtt_current;
                }
                if ("rtt_max" in data && data.rtt_max != undefined) {
                    this.rtt_max = data.rtt_max;
                }
                if ("key_frames" in data && data.key_frames != undefined) {
                    this.key_frames = data.key_frames;
                }
                if ("last_key_frame" in data && data.last_key_frame != undefined) {
                    this.last_key_frame = data.last_key_frame;
                }
                if ("layer_lock_plis" in data && data.layer_lock_plis != undefined) {
                    this.layer_lock_plis = data.layer_lock_plis;
                }
                if ("last_layer_lock_pli" in data && data.last_layer_lock_pli != undefined) {
                    this.last_layer_lock_pli = data.last_layer_lock_pli;
                }
                if ("sample_rate" in data && data.sample_rate != undefined) {
                    this.sample_rate = data.sample_rate;
                }
                if ("drift_ms" in data && data.drift_ms != undefined) {
                    this.drift_ms = data.drift_ms;
                }
            }
            if (!this.gap_histogram)
                this.gap_histogram = new Map();
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get packets() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set packets(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get packet_rate() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set packet_rate(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get bytes() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set bytes(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get header_bytes() {
            return pb_1.Message.getFieldWithDefault(this, 39, 0) as number;
        }
        set header_bytes(value: number) {
            pb_1.Message.setField(this, 39, value);
        }
        get bitrate() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set bitrate(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get packets_lost() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set packets_lost(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get packet_loss_rate() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set packet_loss_rate(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get packet_loss_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set packet_loss_percentage(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get packets_duplicate() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set packets_duplicate(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get packet_duplicate_rate() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set packet_duplicate_rate(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get bytes_duplicate() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set bytes_duplicate(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get header_bytes_duplicate() {
            return pb_1.Message.getFieldWithDefault(this, 40, 0) as number;
        }
        set header_bytes_duplicate(value: number) {
            pb_1.Message.setField(this, 40, value);
        }
        get bitrate_duplicate() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set bitrate_duplicate(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get packets_padding() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set packets_padding(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get packet_padding_rate() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set packet_padding_rate(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get bytes_padding() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set bytes_padding(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get header_bytes_padding() {
            return pb_1.Message.getFieldWithDefault(this, 41, 0) as number;
        }
        set header_bytes_padding(value: number) {
            pb_1.Message.setField(this, 41, value);
        }
        get bitrate_padding() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set bitrate_padding(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get packets_out_of_order() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set packets_out_of_order(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get frames() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set frames(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get frame_rate() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set frame_rate(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get jitter_current() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set jitter_current(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get jitter_max() {
            return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
        }
        set jitter_max(value: number) {
            pb_1.Message.setField(this, 23, value);
        }
        get gap_histogram() {
            return pb_1.Message.getField(this, 24) as any as Map<number, number>;
        }
        set gap_histogram(value: Map<number, number>) {
            pb_1.Message.setField(this, 24, value as any);
        }
        get nacks() {
            return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
        }
        set nacks(value: number) {
            pb_1.Message.setField(this, 25, value);
        }
        get nack_acks() {
            return pb_1.Message.getFieldWithDefault(this, 37, 0) as number;
        }
        set nack_acks(value: number) {
            pb_1.Message.setField(this, 37, value);
        }
        get nack_misses() {
            return pb_1.Message.getFieldWithDefault(this, 26, 0) as number;
        }
        set nack_misses(value: number) {
            pb_1.Message.setField(this, 26, value);
        }
        get nack_repeated() {
            return pb_1.Message.getFieldWithDefault(this, 38, 0) as number;
        }
        set nack_repeated(value: number) {
            pb_1.Message.setField(this, 38, value);
        }
        get plis() {
            return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
        }
        set plis(value: number) {
            pb_1.Message.setField(this, 27, value);
        }
        get last_pli() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 28) as dependency_1.google.protobuf.Timestamp;
        }
        set last_pli(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 28, value);
        }
        get has_last_pli() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get firs() {
            return pb_1.Message.getFieldWithDefault(this, 29, 0) as number;
        }
        set firs(value: number) {
            pb_1.Message.setField(this, 29, value);
        }
        get last_fir() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 30) as dependency_1.google.protobuf.Timestamp;
        }
        set last_fir(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 30, value);
        }
        get has_last_fir() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get rtt_current() {
            return pb_1.Message.getFieldWithDefault(this, 31, 0) as number;
        }
        set rtt_current(value: number) {
            pb_1.Message.setField(this, 31, value);
        }
        get rtt_max() {
            return pb_1.Message.getFieldWithDefault(this, 32, 0) as number;
        }
        set rtt_max(value: number) {
            pb_1.Message.setField(this, 32, value);
        }
        get key_frames() {
            return pb_1.Message.getFieldWithDefault(this, 33, 0) as number;
        }
        set key_frames(value: number) {
            pb_1.Message.setField(this, 33, value);
        }
        get last_key_frame() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 34) as dependency_1.google.protobuf.Timestamp;
        }
        set last_key_frame(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 34, value);
        }
        get has_last_key_frame() {
            return pb_1.Message.getField(this, 34) != null;
        }
        get layer_lock_plis() {
            return pb_1.Message.getFieldWithDefault(this, 35, 0) as number;
        }
        set layer_lock_plis(value: number) {
            pb_1.Message.setField(this, 35, value);
        }
        get last_layer_lock_pli() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 36) as dependency_1.google.protobuf.Timestamp;
        }
        set last_layer_lock_pli(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 36, value);
        }
        get has_last_layer_lock_pli() {
            return pb_1.Message.getField(this, 36) != null;
        }
        get sample_rate() {
            return pb_1.Message.getFieldWithDefault(this, 42, 0) as number;
        }
        set sample_rate(value: number) {
            pb_1.Message.setField(this, 42, value);
        }
        get drift_ms() {
            return pb_1.Message.getFieldWithDefault(this, 43, 0) as number;
        }
        set drift_ms(value: number) {
            pb_1.Message.setField(this, 43, value);
        }
        static fromObject(data: {
            start_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            duration?: number;
            packets?: number;
            packet_rate?: number;
            bytes?: number;
            header_bytes?: number;
            bitrate?: number;
            packets_lost?: number;
            packet_loss_rate?: number;
            packet_loss_percentage?: number;
            packets_duplicate?: number;
            packet_duplicate_rate?: number;
            bytes_duplicate?: number;
            header_bytes_duplicate?: number;
            bitrate_duplicate?: number;
            packets_padding?: number;
            packet_padding_rate?: number;
            bytes_padding?: number;
            header_bytes_padding?: number;
            bitrate_padding?: number;
            packets_out_of_order?: number;
            frames?: number;
            frame_rate?: number;
            jitter_current?: number;
            jitter_max?: number;
            gap_histogram?: {
                [key: number]: number;
            };
            nacks?: number;
            nack_acks?: number;
            nack_misses?: number;
            nack_repeated?: number;
            plis?: number;
            last_pli?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            firs?: number;
            last_fir?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            rtt_current?: number;
            rtt_max?: number;
            key_frames?: number;
            last_key_frame?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            layer_lock_plis?: number;
            last_layer_lock_pli?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            sample_rate?: number;
            drift_ms?: number;
        }): RTPStats {
            const message = new RTPStats({});
            if (data.start_time != null) {
                message.start_time = dependency_1.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_1.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.packets != null) {
                message.packets = data.packets;
            }
            if (data.packet_rate != null) {
                message.packet_rate = data.packet_rate;
            }
            if (data.bytes != null) {
                message.bytes = data.bytes;
            }
            if (data.header_bytes != null) {
                message.header_bytes = data.header_bytes;
            }
            if (data.bitrate != null) {
                message.bitrate = data.bitrate;
            }
            if (data.packets_lost != null) {
                message.packets_lost = data.packets_lost;
            }
            if (data.packet_loss_rate != null) {
                message.packet_loss_rate = data.packet_loss_rate;
            }
            if (data.packet_loss_percentage != null) {
                message.packet_loss_percentage = data.packet_loss_percentage;
            }
            if (data.packets_duplicate != null) {
                message.packets_duplicate = data.packets_duplicate;
            }
            if (data.packet_duplicate_rate != null) {
                message.packet_duplicate_rate = data.packet_duplicate_rate;
            }
            if (data.bytes_duplicate != null) {
                message.bytes_duplicate = data.bytes_duplicate;
            }
            if (data.header_bytes_duplicate != null) {
                message.header_bytes_duplicate = data.header_bytes_duplicate;
            }
            if (data.bitrate_duplicate != null) {
                message.bitrate_duplicate = data.bitrate_duplicate;
            }
            if (data.packets_padding != null) {
                message.packets_padding = data.packets_padding;
            }
            if (data.packet_padding_rate != null) {
                message.packet_padding_rate = data.packet_padding_rate;
            }
            if (data.bytes_padding != null) {
                message.bytes_padding = data.bytes_padding;
            }
            if (data.header_bytes_padding != null) {
                message.header_bytes_padding = data.header_bytes_padding;
            }
            if (data.bitrate_padding != null) {
                message.bitrate_padding = data.bitrate_padding;
            }
            if (data.packets_out_of_order != null) {
                message.packets_out_of_order = data.packets_out_of_order;
            }
            if (data.frames != null) {
                message.frames = data.frames;
            }
            if (data.frame_rate != null) {
                message.frame_rate = data.frame_rate;
            }
            if (data.jitter_current != null) {
                message.jitter_current = data.jitter_current;
            }
            if (data.jitter_max != null) {
                message.jitter_max = data.jitter_max;
            }
            if (typeof data.gap_histogram == "object") {
                message.gap_histogram = new Map(Object.entries(data.gap_histogram).map(([key, value]) => [Number(key), value]));
            }
            if (data.nacks != null) {
                message.nacks = data.nacks;
            }
            if (data.nack_acks != null) {
                message.nack_acks = data.nack_acks;
            }
            if (data.nack_misses != null) {
                message.nack_misses = data.nack_misses;
            }
            if (data.nack_repeated != null) {
                message.nack_repeated = data.nack_repeated;
            }
            if (data.plis != null) {
                message.plis = data.plis;
            }
            if (data.last_pli != null) {
                message.last_pli = dependency_1.google.protobuf.Timestamp.fromObject(data.last_pli);
            }
            if (data.firs != null) {
                message.firs = data.firs;
            }
            if (data.last_fir != null) {
                message.last_fir = dependency_1.google.protobuf.Timestamp.fromObject(data.last_fir);
            }
            if (data.rtt_current != null) {
                message.rtt_current = data.rtt_current;
            }
            if (data.rtt_max != null) {
                message.rtt_max = data.rtt_max;
            }
            if (data.key_frames != null) {
                message.key_frames = data.key_frames;
            }
            if (data.last_key_frame != null) {
                message.last_key_frame = dependency_1.google.protobuf.Timestamp.fromObject(data.last_key_frame);
            }
            if (data.layer_lock_plis != null) {
                message.layer_lock_plis = data.layer_lock_plis;
            }
            if (data.last_layer_lock_pli != null) {
                message.last_layer_lock_pli = dependency_1.google.protobuf.Timestamp.fromObject(data.last_layer_lock_pli);
            }
            if (data.sample_rate != null) {
                message.sample_rate = data.sample_rate;
            }
            if (data.drift_ms != null) {
                message.drift_ms = data.drift_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                start_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                duration?: number;
                packets?: number;
                packet_rate?: number;
                bytes?: number;
                header_bytes?: number;
                bitrate?: number;
                packets_lost?: number;
                packet_loss_rate?: number;
                packet_loss_percentage?: number;
                packets_duplicate?: number;
                packet_duplicate_rate?: number;
                bytes_duplicate?: number;
                header_bytes_duplicate?: number;
                bitrate_duplicate?: number;
                packets_padding?: number;
                packet_padding_rate?: number;
                bytes_padding?: number;
                header_bytes_padding?: number;
                bitrate_padding?: number;
                packets_out_of_order?: number;
                frames?: number;
                frame_rate?: number;
                jitter_current?: number;
                jitter_max?: number;
                gap_histogram?: {
                    [key: number]: number;
                };
                nacks?: number;
                nack_acks?: number;
                nack_misses?: number;
                nack_repeated?: number;
                plis?: number;
                last_pli?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                firs?: number;
                last_fir?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                rtt_current?: number;
                rtt_max?: number;
                key_frames?: number;
                last_key_frame?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                layer_lock_plis?: number;
                last_layer_lock_pli?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                sample_rate?: number;
                drift_ms?: number;
            } = {};
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.packets != null) {
                data.packets = this.packets;
            }
            if (this.packet_rate != null) {
                data.packet_rate = this.packet_rate;
            }
            if (this.bytes != null) {
                data.bytes = this.bytes;
            }
            if (this.header_bytes != null) {
                data.header_bytes = this.header_bytes;
            }
            if (this.bitrate != null) {
                data.bitrate = this.bitrate;
            }
            if (this.packets_lost != null) {
                data.packets_lost = this.packets_lost;
            }
            if (this.packet_loss_rate != null) {
                data.packet_loss_rate = this.packet_loss_rate;
            }
            if (this.packet_loss_percentage != null) {
                data.packet_loss_percentage = this.packet_loss_percentage;
            }
            if (this.packets_duplicate != null) {
                data.packets_duplicate = this.packets_duplicate;
            }
            if (this.packet_duplicate_rate != null) {
                data.packet_duplicate_rate = this.packet_duplicate_rate;
            }
            if (this.bytes_duplicate != null) {
                data.bytes_duplicate = this.bytes_duplicate;
            }
            if (this.header_bytes_duplicate != null) {
                data.header_bytes_duplicate = this.header_bytes_duplicate;
            }
            if (this.bitrate_duplicate != null) {
                data.bitrate_duplicate = this.bitrate_duplicate;
            }
            if (this.packets_padding != null) {
                data.packets_padding = this.packets_padding;
            }
            if (this.packet_padding_rate != null) {
                data.packet_padding_rate = this.packet_padding_rate;
            }
            if (this.bytes_padding != null) {
                data.bytes_padding = this.bytes_padding;
            }
            if (this.header_bytes_padding != null) {
                data.header_bytes_padding = this.header_bytes_padding;
            }
            if (this.bitrate_padding != null) {
                data.bitrate_padding = this.bitrate_padding;
            }
            if (this.packets_out_of_order != null) {
                data.packets_out_of_order = this.packets_out_of_order;
            }
            if (this.frames != null) {
                data.frames = this.frames;
            }
            if (this.frame_rate != null) {
                data.frame_rate = this.frame_rate;
            }
            if (this.jitter_current != null) {
                data.jitter_current = this.jitter_current;
            }
            if (this.jitter_max != null) {
                data.jitter_max = this.jitter_max;
            }
            if (this.gap_histogram != null) {
                data.gap_histogram = (Object.fromEntries)(this.gap_histogram);
            }
            if (this.nacks != null) {
                data.nacks = this.nacks;
            }
            if (this.nack_acks != null) {
                data.nack_acks = this.nack_acks;
            }
            if (this.nack_misses != null) {
                data.nack_misses = this.nack_misses;
            }
            if (this.nack_repeated != null) {
                data.nack_repeated = this.nack_repeated;
            }
            if (this.plis != null) {
                data.plis = this.plis;
            }
            if (this.last_pli != null) {
                data.last_pli = this.last_pli.toObject();
            }
            if (this.firs != null) {
                data.firs = this.firs;
            }
            if (this.last_fir != null) {
                data.last_fir = this.last_fir.toObject();
            }
            if (this.rtt_current != null) {
                data.rtt_current = this.rtt_current;
            }
            if (this.rtt_max != null) {
                data.rtt_max = this.rtt_max;
            }
            if (this.key_frames != null) {
                data.key_frames = this.key_frames;
            }
            if (this.last_key_frame != null) {
                data.last_key_frame = this.last_key_frame.toObject();
            }
            if (this.layer_lock_plis != null) {
                data.layer_lock_plis = this.layer_lock_plis;
            }
            if (this.last_layer_lock_pli != null) {
                data.last_layer_lock_pli = this.last_layer_lock_pli.toObject();
            }
            if (this.sample_rate != null) {
                data.sample_rate = this.sample_rate;
            }
            if (this.drift_ms != null) {
                data.drift_ms = this.drift_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_time)
                writer.writeMessage(1, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(2, this.end_time, () => this.end_time.serialize(writer));
            if (this.duration != 0)
                writer.writeDouble(3, this.duration);
            if (this.packets != 0)
                writer.writeUint32(4, this.packets);
            if (this.packet_rate != 0)
                writer.writeDouble(5, this.packet_rate);
            if (this.bytes != 0)
                writer.writeUint64(6, this.bytes);
            if (this.header_bytes != 0)
                writer.writeUint64(39, this.header_bytes);
            if (this.bitrate != 0)
                writer.writeDouble(7, this.bitrate);
            if (this.packets_lost != 0)
                writer.writeUint32(8, this.packets_lost);
            if (this.packet_loss_rate != 0)
                writer.writeDouble(9, this.packet_loss_rate);
            if (this.packet_loss_percentage != 0)
                writer.writeFloat(10, this.packet_loss_percentage);
            if (this.packets_duplicate != 0)
                writer.writeUint32(11, this.packets_duplicate);
            if (this.packet_duplicate_rate != 0)
                writer.writeDouble(12, this.packet_duplicate_rate);
            if (this.bytes_duplicate != 0)
                writer.writeUint64(13, this.bytes_duplicate);
            if (this.header_bytes_duplicate != 0)
                writer.writeUint64(40, this.header_bytes_duplicate);
            if (this.bitrate_duplicate != 0)
                writer.writeDouble(14, this.bitrate_duplicate);
            if (this.packets_padding != 0)
                writer.writeUint32(15, this.packets_padding);
            if (this.packet_padding_rate != 0)
                writer.writeDouble(16, this.packet_padding_rate);
            if (this.bytes_padding != 0)
                writer.writeUint64(17, this.bytes_padding);
            if (this.header_bytes_padding != 0)
                writer.writeUint64(41, this.header_bytes_padding);
            if (this.bitrate_padding != 0)
                writer.writeDouble(18, this.bitrate_padding);
            if (this.packets_out_of_order != 0)
                writer.writeUint32(19, this.packets_out_of_order);
            if (this.frames != 0)
                writer.writeUint32(20, this.frames);
            if (this.frame_rate != 0)
                writer.writeDouble(21, this.frame_rate);
            if (this.jitter_current != 0)
                writer.writeDouble(22, this.jitter_current);
            if (this.jitter_max != 0)
                writer.writeDouble(23, this.jitter_max);
            for (const [key, value] of this.gap_histogram) {
                writer.writeMessage(24, this.gap_histogram, () => {
                    writer.writeInt32(1, key);
                    writer.writeUint32(2, value);
                });
            }
            if (this.nacks != 0)
                writer.writeUint32(25, this.nacks);
            if (this.nack_acks != 0)
                writer.writeUint32(37, this.nack_acks);
            if (this.nack_misses != 0)
                writer.writeUint32(26, this.nack_misses);
            if (this.nack_repeated != 0)
                writer.writeUint32(38, this.nack_repeated);
            if (this.plis != 0)
                writer.writeUint32(27, this.plis);
            if (this.has_last_pli)
                writer.writeMessage(28, this.last_pli, () => this.last_pli.serialize(writer));
            if (this.firs != 0)
                writer.writeUint32(29, this.firs);
            if (this.has_last_fir)
                writer.writeMessage(30, this.last_fir, () => this.last_fir.serialize(writer));
            if (this.rtt_current != 0)
                writer.writeUint32(31, this.rtt_current);
            if (this.rtt_max != 0)
                writer.writeUint32(32, this.rtt_max);
            if (this.key_frames != 0)
                writer.writeUint32(33, this.key_frames);
            if (this.has_last_key_frame)
                writer.writeMessage(34, this.last_key_frame, () => this.last_key_frame.serialize(writer));
            if (this.layer_lock_plis != 0)
                writer.writeUint32(35, this.layer_lock_plis);
            if (this.has_last_layer_lock_pli)
                writer.writeMessage(36, this.last_layer_lock_pli, () => this.last_layer_lock_pli.serialize(writer));
            if (this.sample_rate != 0)
                writer.writeDouble(42, this.sample_rate);
            if (this.drift_ms != 0)
                writer.writeDouble(43, this.drift_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RTPStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RTPStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.duration = reader.readDouble();
                        break;
                    case 4:
                        message.packets = reader.readUint32();
                        break;
                    case 5:
                        message.packet_rate = reader.readDouble();
                        break;
                    case 6:
                        message.bytes = reader.readUint64();
                        break;
                    case 39:
                        message.header_bytes = reader.readUint64();
                        break;
                    case 7:
                        message.bitrate = reader.readDouble();
                        break;
                    case 8:
                        message.packets_lost = reader.readUint32();
                        break;
                    case 9:
                        message.packet_loss_rate = reader.readDouble();
                        break;
                    case 10:
                        message.packet_loss_percentage = reader.readFloat();
                        break;
                    case 11:
                        message.packets_duplicate = reader.readUint32();
                        break;
                    case 12:
                        message.packet_duplicate_rate = reader.readDouble();
                        break;
                    case 13:
                        message.bytes_duplicate = reader.readUint64();
                        break;
                    case 40:
                        message.header_bytes_duplicate = reader.readUint64();
                        break;
                    case 14:
                        message.bitrate_duplicate = reader.readDouble();
                        break;
                    case 15:
                        message.packets_padding = reader.readUint32();
                        break;
                    case 16:
                        message.packet_padding_rate = reader.readDouble();
                        break;
                    case 17:
                        message.bytes_padding = reader.readUint64();
                        break;
                    case 41:
                        message.header_bytes_padding = reader.readUint64();
                        break;
                    case 18:
                        message.bitrate_padding = reader.readDouble();
                        break;
                    case 19:
                        message.packets_out_of_order = reader.readUint32();
                        break;
                    case 20:
                        message.frames = reader.readUint32();
                        break;
                    case 21:
                        message.frame_rate = reader.readDouble();
                        break;
                    case 22:
                        message.jitter_current = reader.readDouble();
                        break;
                    case 23:
                        message.jitter_max = reader.readDouble();
                        break;
                    case 24:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.gap_histogram as any, reader, reader.readInt32, reader.readUint32));
                        break;
                    case 25:
                        message.nacks = reader.readUint32();
                        break;
                    case 37:
                        message.nack_acks = reader.readUint32();
                        break;
                    case 26:
                        message.nack_misses = reader.readUint32();
                        break;
                    case 38:
                        message.nack_repeated = reader.readUint32();
                        break;
                    case 27:
                        message.plis = reader.readUint32();
                        break;
                    case 28:
                        reader.readMessage(message.last_pli, () => message.last_pli = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 29:
                        message.firs = reader.readUint32();
                        break;
                    case 30:
                        reader.readMessage(message.last_fir, () => message.last_fir = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 31:
                        message.rtt_current = reader.readUint32();
                        break;
                    case 32:
                        message.rtt_max = reader.readUint32();
                        break;
                    case 33:
                        message.key_frames = reader.readUint32();
                        break;
                    case 34:
                        reader.readMessage(message.last_key_frame, () => message.last_key_frame = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 35:
                        message.layer_lock_plis = reader.readUint32();
                        break;
                    case 36:
                        reader.readMessage(message.last_layer_lock_pli, () => message.last_layer_lock_pli = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 42:
                        message.sample_rate = reader.readDouble();
                        break;
                    case 43:
                        message.drift_ms = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RTPStats {
            return RTPStats.deserialize(bytes);
        }
    }
    export class TimedVersion extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            unix_micro?: number;
            ticks?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("unix_micro" in data && data.unix_micro != undefined) {
                    this.unix_micro = data.unix_micro;
                }
                if ("ticks" in data && data.ticks != undefined) {
                    this.ticks = data.ticks;
                }
            }
        }
        get unix_micro() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set unix_micro(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get ticks() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set ticks(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            unix_micro?: number;
            ticks?: number;
        }): TimedVersion {
            const message = new TimedVersion({});
            if (data.unix_micro != null) {
                message.unix_micro = data.unix_micro;
            }
            if (data.ticks != null) {
                message.ticks = data.ticks;
            }
            return message;
        }
        toObject() {
            const data: {
                unix_micro?: number;
                ticks?: number;
            } = {};
            if (this.unix_micro != null) {
                data.unix_micro = this.unix_micro;
            }
            if (this.ticks != null) {
                data.ticks = this.ticks;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.unix_micro != 0)
                writer.writeInt64(1, this.unix_micro);
            if (this.ticks != 0)
                writer.writeInt32(2, this.ticks);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimedVersion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimedVersion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.unix_micro = reader.readInt64();
                        break;
                    case 2:
                        message.ticks = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimedVersion {
            return TimedVersion.deserialize(bytes);
        }
    }
}
