/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: create_room.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./livekit_models";
import * as pb_1 from "google-protobuf";
export namespace go_protocol {
    export class CreateRoomRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            room_id?: string;
            metadata?: string;
        } & (({
            max_participants?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("max_participants" in data && data.max_participants != undefined) {
                    this.max_participants = data.max_participants;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_participants() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set max_participants(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_max_participants() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _max_participants() {
            const cases: {
                [index: number]: "none" | "max_participants";
            } = {
                0: "none",
                3: "max_participants"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            room_id?: string;
            metadata?: string;
            max_participants?: number;
        }): CreateRoomRequest {
            const message = new CreateRoomRequest({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            if (data.max_participants != null) {
                message.max_participants = data.max_participants;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                metadata?: string;
                max_participants?: number;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            if (this.max_participants != null) {
                data.max_participants = this.max_participants;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.metadata.length)
                writer.writeString(2, this.metadata);
            if (this.has_max_participants)
                writer.writeUint32(3, this.max_participants);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.metadata = reader.readString();
                        break;
                    case 3:
                        message.max_participants = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoomRequest {
            return CreateRoomRequest.deserialize(bytes);
        }
    }
    export class CreateRoomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: boolean;
            msg?: string;
            room_info?: dependency_1.livekit.Room;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("room_info" in data && data.room_info != undefined) {
                    this.room_info = data.room_info;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set msg(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get room_info() {
            return pb_1.Message.getWrapperField(this, dependency_1.livekit.Room, 3) as dependency_1.livekit.Room;
        }
        set room_info(value: dependency_1.livekit.Room) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_room_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            status?: boolean;
            msg?: string;
            room_info?: ReturnType<typeof dependency_1.livekit.Room.prototype.toObject>;
        }): CreateRoomResponse {
            const message = new CreateRoomResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.msg != null) {
                message.msg = data.msg;
            }
            if (data.room_info != null) {
                message.room_info = dependency_1.livekit.Room.fromObject(data.room_info);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: boolean;
                msg?: string;
                room_info?: ReturnType<typeof dependency_1.livekit.Room.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.msg != null) {
                data.msg = this.msg;
            }
            if (this.room_info != null) {
                data.room_info = this.room_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != false)
                writer.writeBool(1, this.status);
            if (this.msg.length)
                writer.writeString(2, this.msg);
            if (this.has_room_info)
                writer.writeMessage(3, this.room_info, () => this.room_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readBool();
                        break;
                    case 2:
                        message.msg = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.room_info, () => message.room_info = dependency_1.livekit.Room.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoomResponse {
            return CreateRoomResponse.deserialize(bytes);
        }
    }
}
