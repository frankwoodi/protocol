/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: auth_room.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./livekit_models";
import * as pb_1 from "google-protobuf";
export namespace go_protocol {
    export class ActiveRoomInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_title?: string;
            room_id?: string;
            sid?: string;
            num_of_joined_participants?: number;
            webhook_url?: string;
            metadata?: string;
            created_at?: number;
            parent_room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_title" in data && data.room_title != undefined) {
                    this.room_title = data.room_title;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("sid" in data && data.sid != undefined) {
                    this.sid = data.sid;
                }
                if ("num_of_joined_participants" in data && data.num_of_joined_participants != undefined) {
                    this.num_of_joined_participants = data.num_of_joined_participants;
                }
                if ("webhook_url" in data && data.webhook_url != undefined) {
                    this.webhook_url = data.webhook_url;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("parent_room_id" in data && data.parent_room_id != undefined) {
                    this.parent_room_id = data.parent_room_id;
                }
            }
        }
        get room_title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sid() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sid(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get num_of_joined_participants() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set num_of_joined_participants(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get webhook_url() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set webhook_url(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set metadata(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set created_at(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get parent_room_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set parent_room_id(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            room_title?: string;
            room_id?: string;
            sid?: string;
            num_of_joined_participants?: number;
            webhook_url?: string;
            metadata?: string;
            created_at?: number;
            parent_room_id?: string;
        }): ActiveRoomInfo {
            const message = new ActiveRoomInfo({});
            if (data.room_title != null) {
                message.room_title = data.room_title;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.sid != null) {
                message.sid = data.sid;
            }
            if (data.num_of_joined_participants != null) {
                message.num_of_joined_participants = data.num_of_joined_participants;
            }
            if (data.webhook_url != null) {
                message.webhook_url = data.webhook_url;
            }
            if (data.metadata != null) {
                message.metadata = data.metadata;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.parent_room_id != null) {
                message.parent_room_id = data.parent_room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                room_title?: string;
                room_id?: string;
                sid?: string;
                num_of_joined_participants?: number;
                webhook_url?: string;
                metadata?: string;
                created_at?: number;
                parent_room_id?: string;
            } = {};
            if (this.room_title != null) {
                data.room_title = this.room_title;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.sid != null) {
                data.sid = this.sid;
            }
            if (this.num_of_joined_participants != null) {
                data.num_of_joined_participants = this.num_of_joined_participants;
            }
            if (this.webhook_url != null) {
                data.webhook_url = this.webhook_url;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.parent_room_id != null) {
                data.parent_room_id = this.parent_room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_title.length)
                writer.writeString(1, this.room_title);
            if (this.room_id.length)
                writer.writeString(2, this.room_id);
            if (this.sid.length)
                writer.writeString(3, this.sid);
            if (this.num_of_joined_participants != 0)
                writer.writeUint64(4, this.num_of_joined_participants);
            if (this.webhook_url.length)
                writer.writeString(5, this.webhook_url);
            if (this.metadata.length)
                writer.writeString(6, this.metadata);
            if (this.created_at != 0)
                writer.writeInt64(7, this.created_at);
            if (this.parent_room_id.length)
                writer.writeString(8, this.parent_room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActiveRoomInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActiveRoomInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_title = reader.readString();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    case 3:
                        message.sid = reader.readString();
                        break;
                    case 4:
                        message.num_of_joined_participants = reader.readUint64();
                        break;
                    case 5:
                        message.webhook_url = reader.readString();
                        break;
                    case 6:
                        message.metadata = reader.readString();
                        break;
                    case 7:
                        message.created_at = reader.readInt64();
                        break;
                    case 8:
                        message.parent_room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActiveRoomInfo {
            return ActiveRoomInfo.deserialize(bytes);
        }
    }
    export class ActiveRoomWithParticipants extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ActiveRoomWithParticipants {
            const message = new ActiveRoomWithParticipants({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActiveRoomWithParticipants {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActiveRoomWithParticipants();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActiveRoomWithParticipants {
            return ActiveRoomWithParticipants.deserialize(bytes);
        }
    }
    export class ActiveRoomInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            room_id?: string;
        }): ActiveRoomInfoRequest {
            const message = new ActiveRoomInfoRequest({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.room_id.length)
                writer.writeString(1, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActiveRoomInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActiveRoomInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActiveRoomInfoRequest {
            return ActiveRoomInfoRequest.deserialize(bytes);
        }
    }
    export class ActiveRoomInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            status?: boolean;
            msg?: string;
            participant_info?: dependency_1.livekit.ParticipantInfo[];
        } & (({
            room_info?: ActiveRoomInfo;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("room_info" in data && data.room_info != undefined) {
                    this.room_info = data.room_info;
                }
                if ("participant_info" in data && data.participant_info != undefined) {
                    this.participant_info = data.participant_info;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set msg(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get room_info() {
            return pb_1.Message.getWrapperField(this, ActiveRoomInfo, 3) as ActiveRoomInfo;
        }
        set room_info(value: ActiveRoomInfo) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_room_info() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get participant_info() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.livekit.ParticipantInfo, 4) as dependency_1.livekit.ParticipantInfo[];
        }
        set participant_info(value: dependency_1.livekit.ParticipantInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get _room_info() {
            const cases: {
                [index: number]: "none" | "room_info";
            } = {
                0: "none",
                3: "room_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            status?: boolean;
            msg?: string;
            room_info?: ReturnType<typeof ActiveRoomInfo.prototype.toObject>;
            participant_info?: ReturnType<typeof dependency_1.livekit.ParticipantInfo.prototype.toObject>[];
        }): ActiveRoomInfoResponse {
            const message = new ActiveRoomInfoResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.msg != null) {
                message.msg = data.msg;
            }
            if (data.room_info != null) {
                message.room_info = ActiveRoomInfo.fromObject(data.room_info);
            }
            if (data.participant_info != null) {
                message.participant_info = data.participant_info.map(item => dependency_1.livekit.ParticipantInfo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: boolean;
                msg?: string;
                room_info?: ReturnType<typeof ActiveRoomInfo.prototype.toObject>;
                participant_info?: ReturnType<typeof dependency_1.livekit.ParticipantInfo.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.msg != null) {
                data.msg = this.msg;
            }
            if (this.room_info != null) {
                data.room_info = this.room_info.toObject();
            }
            if (this.participant_info != null) {
                data.participant_info = this.participant_info.map((item: dependency_1.livekit.ParticipantInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != false)
                writer.writeBool(1, this.status);
            if (this.msg.length)
                writer.writeString(2, this.msg);
            if (this.has_room_info)
                writer.writeMessage(3, this.room_info, () => this.room_info.serialize(writer));
            if (this.participant_info.length)
                writer.writeRepeatedMessage(4, this.participant_info, (item: dependency_1.livekit.ParticipantInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActiveRoomInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActiveRoomInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readBool();
                        break;
                    case 2:
                        message.msg = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.room_info, () => message.room_info = ActiveRoomInfo.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.participant_info, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.livekit.ParticipantInfo.deserialize(reader), dependency_1.livekit.ParticipantInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActiveRoomInfoResponse {
            return ActiveRoomInfoResponse.deserialize(bytes);
        }
    }
    export class IsRoomActiveRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): IsRoomActiveRequest {
            const message = new IsRoomActiveRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IsRoomActiveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IsRoomActiveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IsRoomActiveRequest {
            return IsRoomActiveRequest.deserialize(bytes);
        }
    }
    export class IsRoomActiveResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): IsRoomActiveResponse {
            const message = new IsRoomActiveResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IsRoomActiveResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IsRoomActiveResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IsRoomActiveResponse {
            return IsRoomActiveResponse.deserialize(bytes);
        }
    }
}
